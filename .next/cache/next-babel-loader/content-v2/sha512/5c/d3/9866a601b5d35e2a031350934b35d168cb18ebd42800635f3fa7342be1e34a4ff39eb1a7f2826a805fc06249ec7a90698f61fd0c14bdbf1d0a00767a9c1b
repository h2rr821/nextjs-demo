{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\h2rr8\\\\H2RR\\\\Online_Courses\\\\JavascriptWebCourse\\\\REACT\\\\NextJS\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from 'next/head';\nimport { Fragment } from 'react';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: props.meetupData.title,\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://admin:admin@cluster0.r4yex.mongodb.net/emailyDB?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // [\n    //     { \n    //         params: {\n    //             meetupId: 'm1'\n    //         }\n    //     }, \n    //     { \n    //         params: {\n    //             meetupId: 'm2'\n    //         }\n    //     }\n    // ]\n\n  };\n} // execute pre-rendering process \n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId); // fetch data from API\n\n  const client = await MongoClient.connect('mongodb+srv://admin:admin@cluster0.r4yex.mongodb.net/emailyDB?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        image: selectedMeetup.image,\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      } // {\n      //     image: 'https://c.wallhere.com/photos/e0/09/pink_lake_view_amazing_Pink_nature_view-1550757.jpg!d',\n      //     id: meetupId, \n      //     title: 'First meetup',\n      //     address: 'Some Street 5, some city',\n      //     description:'This is a first meetup',\n      // }\n\n    },\n    revalidate: 1 //every one second\n\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/h2rr8/H2RR/Online_Courses/JavascriptWebCourse/REACT/NextJS/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","Head","Fragment","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne","id","revalidate"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport Head from 'next/head';\r\nimport { Fragment } from 'react';\r\n\r\nfunction MeetupDetails(props) {\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n            <Head>\r\n                <title>{props.meetupData.title}</title>\r\n                <meta \r\n                    name={props.meetupData.title}\r\n                    content={props.meetupData.description}\r\n                />\r\n            </Head>\r\n            <MeetupDetail \r\n                image={props.meetupData.image}\r\n                title={props.meetupData.title}\r\n                address={props.meetupData.address}\r\n                description={props.meetupData.description}\r\n            />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://admin:admin@cluster0.r4yex.mongodb.net/emailyDB?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();\r\n\r\n    client.close();\r\n    return {\r\n        fallback: false,\r\n        paths:meetups.map(meetup => ({\r\n            params: {meetupId: meetup._id.toString()}\r\n        }))\r\n        // [\r\n        //     { \r\n        //         params: {\r\n        //             meetupId: 'm1'\r\n        //         }\r\n        //     }, \r\n        //     { \r\n        //         params: {\r\n        //             meetupId: 'm2'\r\n        //         }\r\n        //     }\r\n        // ]\r\n    }\r\n}\r\n\r\n// execute pre-rendering process \r\nexport async function getStaticProps(context) {\r\n\r\n    const meetupId = context.params.meetupId;\r\n\r\n    console.log(meetupId);\r\n    // fetch data from API\r\n\r\n    \r\n    const client = await MongoClient.connect('mongodb+srv://admin:admin@cluster0.r4yex.mongodb.net/emailyDB?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)});\r\n\r\n    client.close();\r\n\r\n    return {\r\n        props: {\r\n            meetupData: {\r\n\r\n                image: selectedMeetup.image,\r\n                id: selectedMeetup._id.toString(),\r\n                title: selectedMeetup.title,\r\n                address: selectedMeetup.address,\r\n                description: selectedMeetup.description\r\n            }\r\n            // {\r\n            //     image: 'https://c.wallhere.com/photos/e0/09/pink_lake_view_amazing_Pink_nature_view-1550757.jpg!d',\r\n            //     id: meetupId, \r\n            //     title: 'First meetup',\r\n            //     address: 'Some Street 5, some city',\r\n            //     description:'This is a first meetup',\r\n            // }\r\n        },\r\n        revalidate: 1  //every one second\r\n    };\r\n\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}